#!/usr/bin/env bash
# This code is distributed under a Non-commerical use 
# License.  See LICENSE for more details.  Use of this
# code must be properly attributed to its author
# Gregory E. Sims provided that its use or derivative 
# use is non-commercial in nature.  Proper attribution        
# can be made by citing:
#
# Sims GE, et al (2009) Alignment-free genome 
# comparison with feature frequency profiles (FFP) and 
# optimal resolutions. Proc. Natl. Acad. Sci. USA.
# 106, 2677-82.
#
# Gregory E. Sims (C) 2010-2012
#
#####################################################

# See man page ffpreprof(1) for full manual.
# See man page ffpre(1) for further reference.

#Set shell options
shopt -s -o nounset # All variables must be declared

#Read only variables
declare -r SCRIPT=${0##*/}
declare -r VERSION='[@]VERSION[@]'
declare -r PACKAGE='FFP PHYLOGENY'
declare -r AUTHOR='Gregory E. Sims'
declare -r YEAR='2011' 
declare -r EMAIL='[@]EMAIL[@]' 
declare -r MAXWORD=${MAX_WORD_SIZE-40}
declare -r MACOSX='[@]ISOSX[@]'

#Is the terminal connected to stdin?
tty -s
declare -r ISTTY=$?

TMP=/tmp
TMPDIR=
TMPFILE=
LONGOPTSDIS=

function print_usage() {
	cat  <<-EOF 
		$SCRIPT - Constructs a relative entropy profile
		Usage: $SCRIPT [OPTIONS] ... [FILE] ...
		        $LONGOPTSDIS
		    -d, --disable-ry	Use ATGC coding, default is RY
		    -s LEN, --start=LEN	Specify start length range, default 1
		    -e LEN, --end=LEN	Specify end length range, default 20
		    -a, --amino 	Files contains amino acids
		    -t, --text		Files contain text
		    -r, --no-reverse	Disable reverse complement matching
		    -T, --tmpdir	Directory for temporary files, default is /tmp
		    -p, --path		Path to ffpre executable if not in path
		    -v, --version	Version Information
		    -h, --help		This help message

		$AUTHOR, $YEAR
		$EMAIL
	EOF
}


function print_version() {
	cat <<-EOF
	$SCRIPT ($VERSION) $PACKAGE
	$AUTHOR (c) $YEAR
	$EMAIL
	EOF
}

# Perform program exit housekeeping
# Optionally accepts an exit status

function clean_up() {
	rm -rf $TMPFILE
	exit $1
}


function die() {
	echo "$*" >&2
	clean_up 1
}

function fatal() {
	die "$SCRIPT: $*"
}

function warn() {
	echo "$SCRIPT: $*" 1>&2
}

# SETUP actions for early termination
trap "clean_up 1" ABRT HUP INT QUIT PIPE

#Getopt flags
DFLAG=    # Disable RY coding  
AFLAG=    # Amino acid Input
TFLAG=    # Text Input
RFLAG=    # Disable Reverse complement
EXE_DIR=

declare -i START=3
declare -i END=20
OPTSTRING="adhe:s:tT:vrp:"
LOPTSTRING="amino,disable-ry,help,start:,end:,text,tmpdir:,version,no-reverse,path:"
RESULT=


# Check which version of getopt is being used.
# If enhanced return value is 4.
getopt -T &> /dev/null
COMPATIBLE=$?
if [ "$COMPATIBLE" = "4" ] ; then
	RESULT=$(getopt -s "bash" -n "$SCRIPT" -o "$OPTSTRING" -l "$LOPTSTRING" -- "$@")
	STATUS=$?
else
	LONGOPTSDIS="LONG OPTIONS DISABLED"
	warn "Long options disabled: Install enhanced 'getopt'"
	RESULT=$(getopt $OPTSTRING $*)
	STATUS=$?
fi

# Error in command line options
[ $STATUS -eq 0 ] || die "Try '$SCRIPT --help' for more information."

#double substitute RESULT with eval
#and place options in the script parameter list

eval set -- "$RESULT"

while [ true ] ; do
	case "$1" in
		-d|--disable-ry) 
			DFLAG="-d"
		;;
		-a|--amino)
			AFLAG="-a"
		;;
		-t|--text)
			TFLAG="-t"
		;;
		-r|--no-reverse)
			RFLAG="-r"
		;;
		-T|--tmpdir)
			shift
			TMP="$1"
		;;	
		-p|--path)
			shift
			EXE_DIR="$1"
		;;	
		-s|--start) 
			shift
			[[ "$1" =~ ^[0-9]+$ ]] \
			|| die "SCRIPT: -s $1: Integer expected"
			START="$1"
		;;
		-e|--end)
	       		shift
			[[ "$1" =~ ^[0-9]+$ ]] \
			|| die "SCRIPT: -e $1: Integer expected"
			END="$1"
		;;
		-v|--version)
			print_version
			exit 0
		;;
		-h|--help)
			print_usage   	
			exit 0
		;;
		--)
	        shift	
		break
		;;
	esac
	shift	

done

ARGV=$*
export PATH=$EXE_DIR:$PATH

# If stdin connected to tty
# issue an error with zero arguments
if [ $ISTTY = 0 -a $# = 0 ] ; then
	echo "$SCRIPT: Missing FILE argument(s)." >&2
	die "Try '$SCRIPT --help' for more information."
elif [ $# = 0 ] ; then

	if [ ! -d $TMP ] ; then
		mkdir -p -m a+rwt $TMP || die "$SCRIPT: Failed to create '$TMP' temp dir."
	fi

	if [ -n "$MACOSX" ] ; then
		TMPFILE=$(mktemp -t $TMP)
	else
		TMPFILE=$(mktemp -p $TMP)
	fi

	ARGV=$TMPFILE
	
	#  Create a tempfile from stdin
	cat <&0  > $TMPFILE || fatal "Failed to create '$TMPFILE' tempfile." 
fi


[ $START -ge 3 ] 	|| fatal "-s $START: Argument must be >= 3"
[ $END -ge $START ] 	|| fatal "-e $END must be >= -s $START"
[ $END -le $MAXWORD ]   || fatal "-e $END must be less than $MAXWORD"
[ $START -le $MAXWORD ] || fatal "-s $START must be less than $MAXWORD"

for (( LEN=START; LEN<=END; LEN++ )) ; do
	RELENTROPY=$( ffpre -l $LEN $DFLAG $AFLAG $TFLAG $RFLAG $ARGV )
	echo $LEN $RELENTROPY
done

clean_up 0


